from flask import Blueprint, request, jsonify
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity
from . import db
from .models import User, Train, Booking
from .utils import admin_required

main = Blueprint('main', __name__)

@main.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    if not username or not password:
        return jsonify({'message': 'Username and password required'}), 400

    if User.query.filter_by(username=username).first():
        return jsonify({'message': 'User already exists'}), 400

    user = User(username=username)
    user.set_password(password)
    db.session.add(user)
    db.session.commit()

    return jsonify({'message': 'User registered successfully'}), 201

@main.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    
    user = User.query.filter_by(username=username).first()

    if not user or not user.check_password(password):
        return jsonify({'message': 'Invalid username or password'}), 401

    access_token = create_access_token(identity={'id': user.id, 'username': user.username, 'is_admin': user.is_admin})
    return jsonify(access_token=access_token), 200

@main.route('/admin/trains', methods=['POST'])
@admin_required
def add_train():
    data = request.get_json()
    source = data.get('source')
    destination = data.get('destination')
    total_seats = data.get('total_seats')

    if not source or not destination or not total_seats:
        return jsonify({'message': 'Source, destination and total seats are required'}), 400

    train = Train(source=source, destination=destination, total_seats=total_seats, available_seats=total_seats)
    db.session.add(train)
    db.session.commit()

    return jsonify({'message': 'Train added successfully'}), 201

@main.route('/trains', methods=['GET'])
def get_trains():
    source = request.args.get('source')
    destination = request.args.get('destination')

    if not source or not destination:
        return jsonify({'message': 'Source and destination are required'}), 400

    trains = Train.query.filter_by(source=source, destination=destination).all()
    result = []
    for train in trains:
        result.append({
            'id': train.id,
            'source': train.source,
            'destination': train.destination,
            'total_seats': train.total_seats,
            'available_seats': train.available_seats
        })

    return jsonify(result), 200

@main.route('/book', methods=['POST'])
@jwt_required()
def book_seat():
    user_identity = get_jwt_identity()
    data = request.get_json()
    train_id = data.get('train_id')

    train = Train.query.get(train_id)
    if not train:
        return jsonify({'message': 'Train not found'}), 404

    if train.available_seats <= 0:
        return jsonify({'message': 'No seats available'}), 400

    # Handle race condition
    from sqlalchemy import func
    seat_number = db.session.query(func.min(Train.available_seats)).filter(Train.id == train.id).with_for_update().scalar()
    train.available_seats -= 1

    booking = Booking(user_id=user_identity['id'], train_id=train.id, seat_number=seat_number)
    db.session.add(booking)
    db.session.commit()

    return jsonify({'message': 'Seat booked successfully', 'booking_id': booking.id}), 201

@main.route('/booking/<int:booking_id>', methods=['GET'])
@jwt_required()
def get_booking_details(booking_id):
    user_identity = get_jwt_identity()
    booking = Booking.query.get(booking_id)

    if not booking or booking.user_id != user_identity['id']:
        return jsonify({'message': 'Booking not found'}), 404

    return jsonify({
        'booking_id': booking.id,
        'user_id': booking.user_id,
        'train_id': booking.train_id,
        'booking_time': booking.booking_time,
        'seat_number': booking.seat_number
    }), 200
